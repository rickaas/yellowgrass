module syncControl

import mobl::ui::generic
import servicemodel
import Yellowgrassmobile
import lib
import customStyle
import serviceOfflineWrapper
import progressbar

var syncFlag : Bool = false;
screen syncSettings() {
		script{
			async{
					getProjects(); 	
			}
		}
		myTabSet(
			[ 	("General", "", generalSyncSettings),	
				("Set Projects", "", syncProjects)], 
		activeTab = null, 
		screenContextId = "tabSetContext",
		tabbarStyle = MyTabbarStyle, 
		activeTabButtonStyle = MyActiveTabButtonStyle, 
		inActiveTabButtonStyle = MyInActiveTabButtonStyle, 
		activeTabStyle = activeTabStyle,
		inActiveTabStyle = inActiveTabStyle
	)
}

control syncProjects() {
	header("Sync Settings") {
		backButton("back", onclick={ root(target="_top"); })
	}
	var phrase = ""
	
	searchBox(phrase) 
	list(pr in Project.searchPrefix(phrase).order("name", true)) {
		item{ checkBox(pr.sync, label=pr.name) }
	}
}

control generalSyncSettings() {
	header("Sync Settings") {
		backButton("back", onclick={ root(target="_top"); })
	}
	html("<h4><font color=#334E33>Last Synced</font></h4>" + getLastSyncDate())
	group{
		html("<h4><font color=#334E33>Data Status</font></h4>")
		label("Complete: ") 
		checkProjectsSynced()  
		<br/>
		label("Dirty: Unknown")
	}
	html("<h4><font color=#334E33>Sync Status</font></h4>")
	group{ 
		when(syncFlag){
			progressbar()
		} else {
			button("Sync now", onclick={ syncDataProjects(); })
		}
	}
}

sync function syncDataProjects() {
	var start = now();
	foreach (project in Project.all().filter("sync", "=", true)) {
		log("syncProject: " + project.name);
		syncProject(project);
	}
	var end = now();
	log("timeNeeded: " + (end - start) / 1000 + " s");
	setLastGeneralSyncFromLocalStorage(start);
}

sync function syncProject(project : Project) {
	// var project = Project.findBy("name", projectname);
	project.lastSynced = now();
	log("get first project info");
	getProject(project.name);
	log("getIssues"); 
	getIssues(project);
	log("getRoadMap");
	project.roadmap = getRoadmap(project);
	log("getIssueDetails");
	getIssuesDetails(project);
	log("done");
}

function getLastSyncDate() : String {
	var generalSync = getLastGeneralSyncFromLocalStorage();
	if(!generalSync) {
		return "Never";
	} else {
		return formatDate(generalSync);
	}
}

function getLastGeneralSyncFromLocalStorage() : DateTime {
	var lastSync = LocalStorage.getItem("lastSync");
	if(lastSync) {
		return  DateTime.parse(lastSync);
	} else {
		return null;
	}
}

function setLastGeneralSyncFromLocalStorage(time : DateTime)  {
	  LocalStorage.setItem("lastSync",time.toString());
}

function checkProjectsEverSynced() : String {
	foreach (project in Project.all().filter("sync", "=", "true")) {
		if(!project.lastSynced) {
			return "Missing";
		}
	} 
	if(Project.all().filter("sync", "=", "true").count() == 0 ){
		return "no data to sync";
	}
	return "true";
}
control checkProjectsSynced() {
	var result = checkProjectsEverSynced()
	when(result == "Missing") {
		image("images/kruisje.png")
	} else {
		when(result == "true") {
			image("images/tick.png")
		} else {
			label(result)
		}
	}
}
