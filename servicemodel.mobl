module servicemodel
import MSGBOX

entity Project{
	// id : String
	name: String (searchable)
	description: String
	url : String 
	weeklyStatsGraph : String
	issuecount: Num
	issueTypes: Collection<Tag> (inverse:project)
	members : Collection<User> (inverse:projects)
	followers: Collection<User>  (inverse:projects)
	issues : Collection<Issue> (inverse:project) 
	roadmap :Collection<Release> (inverse:project)
	version : Num
	
	function getIssueTypes():[(String,String)]{
		var array :[(String,String)] = [];
		foreach(tag in this.issueTypes){
			array.push((tag.id,tag.name));
		} 
		return array; 
	}
}

entity User{
	// id : String
	name: String 
	tag: String 
	url: String
	projects: Collection<Project>(inverse:members, inverse:followers) 
	version :Num
	
}

entity Release{
	
	name: String
	project: Project
	issues: Collection<Issue> (inverse:release)
	
	
}

entity Issue{ 
	// id : String
	number: Num
	title : String (searchable)
	description : String
	submitted : DateTime
	project : Project 
	reporter: User 
	nrVotes: Num 
	open : Bool
	comments : Collection<Comment>(inverse:issue) 
	tags: Collection<Tag> (inverse:issue)
	release : Release 
	version : Num
}

entity Comment :Event {
	// id : String
	text : String
	submitted : DateTime
	author : User
	issue: Issue 

	
}
	


entity Event{
	// id : String
	submitted : DateTime
}

entity Tag{
	// id: String
	name  : String
	color : String
	issue: Issue 
	project:Project
	
}

function projectsMapper(json: JSON): [Project]{
		var Array = Collection<Project>();
		foreach(json:JSON in json){
			Array.add(Project.fromSelectJSON(json));
		}
		return Array.list();
}

function projectMapper(json: JSON): Project {
		return Project.fromSelectJSON(json);
} 

function booleanMapper(json: JSON): Bool {
		if(!json.answer){
			var map = Dynamic(title=json.id);
			var content = "";
			foreach(string in json.errors){
				content= content + "<span class=\"error\">" + string +"</span>";
			}
			map.opacity=0.9;
			map.autoclose=false;
			map.content=content;
			map.type="error";
			msgBox(map);
		}
		return json.answer;
} 

function issueMapper(json:JSON):Collection<Issue>{
		var Array = Collection<Issue>();
		foreach(json:JSON in json){
			Array.add(Issue.fromSelectJSON(json));
		}
		return Array;
}

function releaseMapper(json:JSON):Collection<Release>{
		var Array = Collection<Release>(); 
		foreach(json:JSON in json){
			Array.add(Release.fromSelectJSON(json));
		}
		return Array;
}