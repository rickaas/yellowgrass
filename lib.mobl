module lib

import mobl::ui::generic
import servicemodel
import customStyle
import serviceOfflineWrapper
import mobl::reflect
import webservices
import MSGBOX
 
resource hack.js 
resource online.js
resource offline.js
resource lib_javascript.js

load lib_javascript.js
load hack.js

   
 
var online:Bool = null;   

var lastStatus:Bool = null;
var currentTab:String = null;


external sync function fixDB() : void
external sync function fixDB2() : void
external sync function fixTablePopulairIssues() : void
external sync function checkServiceStatus(URL : String) : Bool
external sync function checkStatus() : Bool
external sync function setCacheFunctions() : void
external sync function testOnline() : Bool
external function executeOfflinefunc(func : Dynamic, params : Dynamic) : void
external sync function asyncServiceCall() : void
external sync function fixSelect(id : String) : void


<javascript>    
__ns.setCacheFunctions = function() { 
	setCacheFunctions(); 
};  	   
</javascript> 
 
<javascript>    
__ns.fixTablePopulairIssues = function() {
	fixTablePopulairIssues(); 
};  	  
</javascript>

<javascript>
__ns.log = function(string) {
	console.log(string); 
}; 
</javascript>

<javascript>
__ns.fixDB = function() {
	fixDB(); 
};
</javascript>   

<javascript>
__ns.fixDB2 = function() {
	console.log("FixTables");
	fixDB2(); 
};
</javascript> 

<javascript> 
__ns.fixTablePopulairIssues = function() { 
	fixTablePopulairIssues(); 
};	 
</javascript>
  
<javascript> 
__ns.checkServiceStatus = function(URL) {
	return checkServiceStatus(URL); 
};
</javascript>

<javascript>  
__ns.checkStatus = function() {
	return checkStatus(); 
};  
</javascript>

<javascript>    
__ns.testOnline = function() {
	return testOnline();  
};    
</javascript> 

<javascript>    
__ns.executeOfflinefunc = function(func, params) {
	return executeOfflinefunc(func, params);  
};  
</javascript>

<javascript>    
__ns.asyncServiceCall = function() {
	setTimeout(function() {	
		x = serviceOfflineWrapper.getIssues(projectControl.currentProject.get());
		mobl.log("sync call is done");
	}, 100);
};    
</javascript>
<javascript>    
__ns.fixSelect = function (id) {
	setTimeout(function() {	
		$("." + id).append($("." + id + "> span").children());  
		},
		100);
};    
</javascript>

control getHeaderImage(hasTitle : Bool) {
	when((1-hasTitle) || (1-toSmall())) {
	image("./images/logo.png", align="left", height=43)}
}

control getBackButton() { 
	button("back", onclick={ screen return; }) 
}
 
function toSmall() : Bool {  
	return (window.innerWidth<=470) ;
}

function isServiceAvailable() : Bool{
	httpRequest("?getProjects", method="GET", encoding="json", data=null, mapper=null);
	return true;
}
 
control myTable() {  
	<table class="mobl__ui__generic__tableStyle" id="myTable"> elements() </table>
}

control textarea(s : String, placeholder : String = null, onchange : Callback = null, style:Style = MyTextArea ) {
 <textarea class=style placeholder=placeholder databind=s onchange=onchange/>
}

control mySelectField(value : String, options : [(String, String)],placeholder:String=null, onchange : Callback = null, style : Style = selectFieldStyle, optionStyle : Style = null) {  
	sel@<select class=style 
		onchange={    
			value = sel.val();
		    if(onchange) {  
		   		onchange(event);    
		   	}  
		}
	>
	<option databind=placeholder class=optionStyle value="" disabled="disabled" selected="selected"/>  
	list((optionValue, optionDescription) in options) {
		<option databind=optionDescription class=optionStyle value=optionValue  /> 
	}  
	</select>  
	script {    
		log("temp");
		fixSelect("customStyle__MySelectField");
	}	
}

@doc "A tabset, takes a list of tuples as argument, e.g. [(\"Tab 1\", \"icon url\", tab1), (\"Tab 2\", \"icon uri\", tab2)] where tab1 and tab2 are controls with no arguments"
control myTabSet(tabs : [(String, String, Control)], activeTab : String = null, screenContextId : String = "tabSetContext", tabbarStyle : Style = tabbarStyle, activeTabButtonStyle : Style = activeTabButtonStyle, inActiveTabButtonStyle : Style = inActiveTabButtonStyle, activeTabStyle : Style = activeTabStyle, inActiveTabStyle : Style = inActiveTabStyle) {
  script {
    if(activeTab == null) {
      activeTab = tabs[0]._1;
    } 
  } 
  var s = ""

  block(tabbarStyle) {
    list((tabName, tabIcon, tabControl) in tabs) {
      span(onclick={ activeTab = tabName; currentTab=activeTab; }, cssClass=activeTab == tabName ? activeTabButtonStyle : inActiveTabButtonStyle) {
        label(tabName)
      }
    }
  }
  //<div style="height: 39px;"/>
  list((tabName, tabIcon, tabControl) in tabs) {
    block(activeTab == tabName ? activeTabStyle : inActiveTabStyle) {
      screenContext(screenContextId) {
        tabControl()
      }
    }
  }
}

function executeOfflinefuncs() {
	if(offlineMap.count() > 0) {
		var entry = offlineMap.one();
		var func = Reflector.get(Service, entry._1);
		var params =  entry._2;
		executeOfflinefunc(func, params);
	}
}

sync function onlinecheck() : Bool { 
	// var status = testOnline();
	// if(lastStatus == null&& status == false){
	// 	msgBox(Dynamic(title="AppStatus", content="The app is currently working offline", type="info",autoClose=true));
	// }else {
	// 	if(lastStatus != null && lastStatus != status){
	// 		var map = Dynamic(title="AppStatus changed", type="info",autoClose=true);
	// 		if(status){
	// 			map.content = "The app changed to online mode";
	// 		}else{
	// 			map.content = "The app changed to offline mode";
	// 		} 
	// 		msgBox(map);
	// 	}
	// }
	// ;
	// lastStatus=status;
	// log("last:"+status);
	// return lastStatus;
	return true ;
}

function showAbout() {
	msgBox( Dynamic(
		title = "About YellowgrassMobile v0.3.5",
		content = "The app is in currently in development.",
		type = "info"
	));
}

function getUserName () : String {
	var currentUser = LocalStorage.getItem("authenticationInformation");
	if(currentUser) {
		return currentUser.name;
	} else {
		return null;
	}
}
