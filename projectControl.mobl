module projectControl

import mobl::ui::generic
import serviceOfflineWrapper
import Yellowgrassmobile
import servicemodel
import issueControl
import roadmapControl
import lib
import customStyle
 
var currentProject : Project = Project();


screen showProjects() {
	header("All Projects") { 
		backButton("back", onclick={ root() ;})
		button("Active", onclick={ showActiveProjects(); })
	}
	group{	
		script{
			currentProject = Project();
			async{
				getProjects(); 	
			}
		}
		var phrase = ""
		// item{label(checkServiceStatus("getProjects"))}
		searchBox(phrase)
		group {
			list(project in Project.searchPrefix(phrase).filter("sync", "=", true).order("name", true)) {  
				item(onclick={ ShowProject(project); }) { label(project.name) }   
			} 
		}    
	}
} 

screen showMyProjects() {
	header("My Projects") { backButton("back",onclick={ root(); }) }
	group{
		script{
			currentProject = Project();
		}
		group{ 
			// var projects = getMyProjects() 
			list(project in Project.all().filter("sync", "=", true).list()) {
				when(hasUser(project)){   
					item(onclick={ ShowProject(project); }) { label(project.name) } 
				}
			} 
		}	
	}
}

function hasUser(project : Project) : Bool {
	return project.members.list().containsElementWithValue("name", getUserName());
} 

 
screen showActiveProjects() {
	header("Active Projects") {
		backButton("back", onclick={ root(); })
		button("All", onclick={ showProjects(); })
	}
	script{
		currentProject = Project();
	}
	group{ 
		var projects = getPopularProjects(10) 
		list(project in projects) {   
			item(onclick={ ShowProject(project); }) { label(project.name) } 
		} 
	}	      
}	  
 
screen ShowProject(project : Project) { 
	script{
		startLoading(); 
		currentProject=getProject(project.name); 
		async{
			getRestProject(currentProject);
		}
	}
	myTabSet(
			[("Info", "", ShowProjectInfo),
			("Issues", "", showPopulairIssues),
			("Roadmap", "", showRoadmap),
			("New Issue", "", CreateIssue)], 
		activeTab = null, 
		screenContextId = "tabSetContext",
		tabbarStyle = MyTabbarStyle, 
		activeTabButtonStyle = MyActiveTabButtonStyle, 
		inActiveTabButtonStyle = MyInActiveTabButtonStyle, 
		activeTabStyle = activeTabStyle,
		inActiveTabStyle = inActiveTabStyle
	)
	//("Issues","",showPopulairIssues),("Roadmap","",showRoadmap),
	script{ endLoading(); } 
}   
 
control ShowProjectInfo() {  
	header(currentProject.name) {
		backButton("back", onclick={ return showProjects(target="_top"); })
	}
	var List = Collection<(String, [User])> (("Members", currentProject.members), ("Followers", currentProject.followers))
	when(currentProject.url != null) {
		item(onclick={ openUrl(currentProject.url);}) { label("Website") } 
	}
	group{ 
		when(currentProject.description != null) {
			html("<h4><font color=#334E33>Description</font></h4>" + currentProject.description)
		} 
	}
	group{
		when(currentProject.weeklyStatsGraph != null) {
			html("<h4><font color=#334E33>Weekly Issue Count</font></h4>") 
			image(currentProject.weeklyStatsGraph, align="center") 
		} 
	} 
	zoomList(List, ShowLabel, ShowUsers) 
}  

function getRestProject(project : Project) {
	sleep(2000);
	if(currentProject == project && project.issuecount == 0) {
		getIssues(project);
		project.issuecount = project.issues.count(); 
	}
	if(currentProject == project) { 
		currentProject.roadmap = getRoadmap(project);
	}
	if(currentProject == project) {
		getIssuesDetails(project);
	} 
}