---------------
EVOLUTION TRACE
---------------

Added projects:

entity Project {
	name		:: String (id, validate(isUniqueProject(this), "Another project with this name already exists"))
	url			:: URL
	issues		-> Set<Issue>
	members		-> Set<User>
}

Attached issues to a project (in Issue):
project		-> Project (inverse = Project.issues)

Assigned users to projects (in User) and made it an inverse:
projects		-> Set<Project> (inverse = Project.members)

----------

Added descriptions to Issue and Project
description :: WikiText (2x)

----------

Added issue numbering
entity Issue/attribute title
   :: add number : Int min(1) max(1)
Problem: Filling the existing issues with incrementing numbers 

----------

Added creation date to projects
entity Project/attribute members
   :: add created : DateTime min(1) max(1)
Problem: Detection hangs

----------

Added open attribute to issues
entity Issue/attribute project
   :: add open : Bool min(1) max(1)

----------

Added url to users
entity User/attribute projects
   :: add url : URL min(1) max(1)

----------

Added reporter to Issue
entity Issue/list()
   :: add reporter - User min(0) max(1)

----------
   
Added Issue types

entity IssueType {
	name	:: String	(id)
}
entity Issue/reporter
   :: add type - IssueType min(0) max(1)

----------

Added issue comments
entity Comment {
	submitted		:: DateTime
	text			:: WikiText
	author			-> User 
}
comments	-> Set<Comment>
(did not try the evolution)

----------

Added email to Issue (for anonymous issue reports)
entity Issue/list()
   :: add email : Email min(1) max(1)
Generalized the attribute to optional later.
Detection does not work (gives id trafo as a result), seems like it does not incorporate the entire data model

----------

Added member requests to Projects:
memberRequests	-> Set<User>
Detection hangs (or takes a long time)

----------

Extracted class memberRequest to store additional dates, but decided against it for now (requests are rare and tagging is more urgent). May redo this later.

----------

Added 
entity Tag {
	name 		:: String (id)
	project 	-> Project
}
and added to Issue:
tags		-> Set<Tag>
Detection hangs (fixed)

----------

Added 

entity Event {
	moment			:: DateTime
}

Comment becomes subtype of event

entity Project
   :: add Event {
              moment : DateTime min(1) max(1) };
list()/#3/None
   :: substitute :: Event
   
Added support for detecting super type declaration changes to the detection. 
Added coupled operator for making a class part of a type hierarchy.

----------

Added additional event types for closing and reopening issues:


entity Comment
   :: add IssueClose Event {
              actor - User min(0) max(1) };
entity Event
   :: add IssueReopen Event {
              actor - User min(0) max(1) }

----------

Generalized comments reference in Issues to refer events:

entity Issue/attribute comments/DeclType/name
   :: substitute Event;

----------

Renamed comments reference to log:

entity Issue/attribute comments/name
   :: substitute log;

----------

Added attachments to issues

entity Issue/list()
   :: add attachments - Attachment min(0) max(-1);
entity IssueClose
   :: add Attachment {
              date : DateTime min(1) max(1)
              file : File min(1) max(1) };

(Used an attachment limit at first, but generalized it later)
No problems, migration ok local and on server

----------

WebDSL started to provide support for queuing emails,

create
   QueuedEmail {
      body :: String
      to :: String
      cc :: String
      bcc :: String
      replyTo :: String
      from :: String
      subject :: String }
;

New Acoda version with new language, works like a charm

----------

Registering tag changes of issues now.

create
   TagAddition : Event {
      actor -> User ( )
      tag -> Tag ( ) }
   before Event;
create
   TagRemoval : Event {
      actor -> User ( )
      tag -> Tag ( ) }
   before Event;

----------

Added support for private projects

create attribute Project.private :: Bool;

----------

Introduced a taggable type. An issue now becomes an extension of taggable (extract taggable from issue)


Detection fails:
identity crisis: rewriting failed, trace:
	editor_detect_transformation_0_0
	editor_detect_transformation_0_0
	weigh_and_derive_transformation_0_2
	weighedDT_0_3
	deriveTransformation_0_0
	deriveTransformation_0_2
[ identity crisis | critical ] Internal error: with clause failed unexpectedly in rule 'editor-detect-transformation'

Fixed this

------------------
INITIAL DATA MODEL
------------------

entity Issue {
	// TODO add optional user association
	title		:: String
	submitted 	:: DateTime
}

entity User {
	name			:: String
	email			:: Email		(validate(userEmailExists(), "Another user already registered using this email address"))
	password		:: Secret		(validate(password.length() >= 8, "Password needs to be at least 8 characters"))
}