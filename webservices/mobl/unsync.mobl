module webservices::mobl::unsync
  import webservices :: mobl :: model
  import webservices :: mobl :: sync
  import mobl :: ui :: generic
  function nrUnsyncedAttachment ( ) : Num {
    return getUnsyncedAttachment ( ) . count ( );
  }
  function nrUnsyncedComment ( ) : Num {
    return getUnsyncedComment ( ) . count ( );
  }
  function nrUnsyncedEvent ( ) : Num {
    return getUnsyncedEvent ( ) . count ( );
  }
  function nrUnsyncedIssue ( ) : Num {
    return getUnsyncedIssue ( ) . count ( );
  }
  function nrUnsyncedIssueClose ( ) : Num {
    return getUnsyncedIssueClose ( ) . count ( );
  }
  function nrUnsyncedIssueGhost ( ) : Num {
    return getUnsyncedIssueGhost ( ) . count ( );
  }
  function nrUnsyncedIssueMoved ( ) : Num {
    return getUnsyncedIssueMoved ( ) . count ( );
  }
  function nrUnsyncedIssueReopen ( ) : Num {
    return getUnsyncedIssueReopen ( ) . count ( );
  }
  function nrUnsyncedProject ( ) : Num {
    return getUnsyncedProject ( ) . count ( );
  }
  function nrUnsyncedTag ( ) : Num {
    return getUnsyncedTag ( ) . count ( );
  }
  function nrUnsyncedTagAddition ( ) : Num {
    return getUnsyncedTagAddition ( ) . count ( );
  }
  function nrUnsyncedTagRemoval ( ) : Num {
    return getUnsyncedTagRemoval ( ) . count ( );
  }
  function nrUnsyncedUser ( ) : Num {
    return getUnsyncedUser ( ) . count ( );
  }
  function getUnsyncedAttachment ( ) : Collection < Attachment > {
    return Attachment . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedComment ( ) : Collection < Comment > {
    return Comment . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedEvent ( ) : Collection < Event > {
    return Event . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedIssue ( ) : Collection < Issue > {
    return Issue . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedIssueClose ( ) : Collection < IssueClose > {
    return IssueClose . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedIssueGhost ( ) : Collection < IssueGhost > {
    return IssueGhost . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedIssueMoved ( ) : Collection < IssueMoved > {
    return IssueMoved . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedIssueReopen ( ) : Collection < IssueReopen > {
    return IssueReopen . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedProject ( ) : Collection < Project > {
    return Project . all ( ) . filter ( "version" , "=" , 0 ) . filter ( "sync" , "=" , true );
  }
  function getUnsyncedTag ( ) : Collection < Tag > {
    return Tag . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedTagAddition ( ) : Collection < TagAddition > {
    return TagAddition . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedTagRemoval ( ) : Collection < TagRemoval > {
    return TagRemoval . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedUser ( ) : Collection < User > {
    return User . all ( ) . filter ( "version" , "=" , 0 );
  }
  function syncUnsyncedAttachment ( ) {
    var begin = now ( ) ;
    Sync . syncAttachment ( getUnsyncedAttachment ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Attachment: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedComment ( ) {
    var begin = now ( ) ;
    Sync . syncComment ( getUnsyncedComment ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Comment: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedEvent ( ) {
    var begin = now ( ) ;
    Sync . syncEvent ( getUnsyncedEvent ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Event: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedIssue ( ) {
    var begin = now ( ) ;
    Sync . syncIssue ( getUnsyncedIssue ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Issue: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedIssueClose ( ) {
    var begin = now ( ) ;
    Sync . syncIssueClose ( getUnsyncedIssueClose ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced IssueClose: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedIssueGhost ( ) {
    var begin = now ( ) ;
    Sync . syncIssueGhost ( getUnsyncedIssueGhost ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced IssueGhost: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedIssueMoved ( ) {
    var begin = now ( ) ;
    Sync . syncIssueMoved ( getUnsyncedIssueMoved ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced IssueMoved: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedIssueReopen ( ) {
    var begin = now ( ) ;
    Sync . syncIssueReopen ( getUnsyncedIssueReopen ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced IssueReopen: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedProject ( ) {
    var begin = now ( ) ;
    Sync . syncProject ( getUnsyncedProject ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Project: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedTag ( ) {
    var begin = now ( ) ;
    Sync . syncTag ( getUnsyncedTag ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Tag: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedTagAddition ( ) {
    var begin = now ( ) ;
    Sync . syncTagAddition ( getUnsyncedTagAddition ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced TagAddition: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedTagRemoval ( ) {
    var begin = now ( ) ;
    Sync . syncTagRemoval ( getUnsyncedTagRemoval ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced TagRemoval: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedUser ( ) {
    var begin = now ( ) ;
    Sync . syncUser ( getUnsyncedUser ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced User: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  control statusUnsyncedEntities ( ) {
    group {
      < h3 >
        "Unsynced"
      </ h3 >
      < p >
        label ( "Attachment: " + nrUnsyncedAttachment ( ) )
      </ p >
      < p >
        label ( "Comment: " + nrUnsyncedComment ( ) )
      </ p >
      < p >
        label ( "Event: " + nrUnsyncedEvent ( ) )
      </ p >
      < p >
        label ( "Issue: " + nrUnsyncedIssue ( ) )
      </ p >
      < p >
        label ( "IssueClose: " + nrUnsyncedIssueClose ( ) )
      </ p >
      < p >
        label ( "IssueGhost: " + nrUnsyncedIssueGhost ( ) )
      </ p >
      < p >
        label ( "IssueMoved: " + nrUnsyncedIssueMoved ( ) )
      </ p >
      < p >
        label ( "IssueReopen: " + nrUnsyncedIssueReopen ( ) )
      </ p >
      < p >
        label ( "Project: " + nrUnsyncedProject ( ) )
      </ p >
      < p >
        label ( "Tag: " + nrUnsyncedTag ( ) )
      </ p >
      < p >
        label ( "TagAddition: " + nrUnsyncedTagAddition ( ) )
      </ p >
      < p >
        label ( "TagRemoval: " + nrUnsyncedTagRemoval ( ) )
      </ p >
      < p >
        label ( "User: " + nrUnsyncedUser ( ) )
      </ p >
    }
  }