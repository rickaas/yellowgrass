module webservices::mobl::simpleView
  import webservices :: mobl :: model
  import mobl :: ui :: generic
  import mobl :: ui :: generic :: datepicker
  screen showControl ( viewer : Control1 < Entity < ? > > , value : Entity < ? > ) {
    viewer ( value )
  }
  screen showControlList ( viewer : Control3 < String , Collection < Entity < ? > > , Control1 < Dynamic > > , headerName : String , values : Collection < Entity < ? > > , dviewer : Control1 < Dynamic > ) {
    viewer ( headerName , values , dviewer )
  }
  control showField ( name : String , value : String ) {
    item {
      label ( name , style = textFieldLabelStyle )
      textField ( value , disabled = true )
    }
  }
  control showTextField ( name : String , value : String ) {
    item {
      label ( name , style = textFieldLabelStyle )
      textField ( value )
    }
  }
  control showBoolField ( name : String , value : Bool ) {
    item {
      label ( name , style = textFieldLabelStyle )
      checkBox ( value )
    }
  }
  control showNumField ( name : String , value : Num ) {
    item {
      label ( name , style = textFieldLabelStyle )
      numField ( value )
    }
  }
  control showDateTimeField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      dateTimePicker ( value )
    }
  }
  control showTimeField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      timePicker ( value )
    }
  }
  control showDateField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      datePicker ( value )
    }
  }
  control showEntityField ( name : String , value : Entity < ? > , viewer : Control1 < Entity < ? > > ) {
    when ( value ) {
      item ( onclick = { showControl(viewer,value); } ) {
        label ( name )
      }
    }
  }
  control showEntitiesField ( name : String , values : Collection < Entity < ? > > , viewer : Control1 < Entity < ? > > ) {
    when ( values ) {
      item ( onclick = { showControlList(showEntitiesList,name,values,viewer); } ) {
        label ( name )
      }
    }
  }
  control showEntitiesList ( headerName : String , values : Collection < Entity < ? > > , viewer : Control1 < Entity < ? > > ) {
    header ( headerName ) {
      backButton ( "back" , onclick = { back(); } )
    }
    list ( value in values ) {
      item ( onclick = { showControl(viewer,value); } ) {
        label ( value . id )
      }
    }
  }
  <javascript>
  __ns.back = function() {
                history.back();
              };
  </javascript>
  external function back ( ) : void
  screen showObjectEmptyScreen ( type : String , id : String , entityCTRL : Control2 < String , String > ) {
    entityCTRL ( type , id )
  }
  style customWarningItemStyle {
    itemMixin ( #000 , #ff5 ) ;
  }
  style customErrorItemStyle {
    itemMixin ( #000 , #f1 ) ;
  }
  control SimpleErrorViewControl ( errorTuple : Tuple2 < JSON , Control2 < String , String > > ) {
    when ( errorTuple . _1 . id ) {
      item {
        label ( errorTuple . _1 . ent + " : " + errorTuple . _1 . id )
      }
    }
    else {
    item {
      label ( errorTuple . _1 . message )
    }
    }
  }
  control DetailErrorViewControl ( errorTuple : Tuple2 < JSON , Control2 < String , String > > ) {
    when ( errorTuple . _1 . id ) {
      item {
        label ( errorTuple . _1 . ent + " : " + errorTuple . _1 . id )
      }
      when ( errorTuple . _2 != null ) {
        item ( onclick = { showObjectEmptyScreen(errorTuple._1.ent,errorTuple._1.id,errorTuple._2); } ) {
          label ( "Show Object" )
        }
      }
      list ( error in errorTuple . _1 . errors ) {
        when ( error . type == "warning" ) {
          item ( style = customWarningItemStyle ) {
            label ( error . message )
          }
        }
        when ( error . type == "error" ) {
          item ( style = customErrorItemStyle ) {
            label ( error . message )
          }
        }
      }
    }
    else {
    item {
      label ( errorTuple . _1 . message )
    }
    }
  }
  control showErrors ( errors : JSON , detailview : Control2 < String , String > = showObject , ignoreFunction : Function0 < void > ) {
    header ( "Errors" ) {
      backButton ( "back" , onclick = { back(); } )
      button ( "ignore" , onclick = { back(); ignoreFunction(); } )
    }
    var collection = Collection < Tuple2 < JSON , Control2 < String , String > > > ( ) ;
    script {
      foreach ( error in errors ) {
        collection . add ( ( error , detailview ) );
      }
    }
    zoomList ( collection , SimpleErrorViewControl , DetailErrorViewControl )
  }
  screen showErrorsEmptyScreen ( errors : JSON , ctrl : Control2 < JSON , ? > , detailCTRL : Control2 < String , String > , continueFunction : Function0 < void > ) {
    ctrl ( errors , detailCTRL , continueFunction )
  }
  control showUserSimple ( ent : User ) {
    header ( "User" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showTextField ( "name" , ent . name )
      showTextField ( "email" , ent . email )
      showBoolField ( "notifications" , ent . notifications )
      showEntitiesField ( "projects" , ent . projects , showProjectSimple )
      showTextField ( "url" , ent . url )
      showTextField ( "tag" , ent . tag )
    }
  }
  control showTagRemovalSimple ( ent : TagRemoval ) {
    header ( "TagRemoval" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntityField ( "actor" , ent . actor , showUserSimple )
      showEntityField ( "tag" , ent . tag , showTagSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showTagAdditionSimple ( ent : TagAddition ) {
    header ( "TagAddition" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntityField ( "actor" , ent . actor , showUserSimple )
      showEntityField ( "tag" , ent . tag , showTagSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showTagSimple ( ent : Tag ) {
    header ( "Tag" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showTextField ( "name" , ent . name )
      showTextField ( "description" , ent . description )
      showEntityField ( "project" , ent . project , showProjectSimple )
      showEntitiesField ( "tags" , ent . tags , showTagSimple )
    }
  }
  control showProjectSimple ( ent : Project ) {
    header ( "Project" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntitiesField ( "test13" , ent . test13 , showProjectSimple )
      showEntityField ( "test12" , ent . test12 , showProjectSimple )
      showDateTimeField ( "test11" , ent . test11 )
      showDateTimeField ( "test10" , ent . test10 )
      showDateTimeField ( "test9" , ent . test9 )
      showNumField ( "test8" , ent . test8 )
      showNumField ( "test7" , ent . test7 )
      showNumField ( "test6" , ent . test6 )
      showTextField ( "test4" , ent . test4 )
      showTextField ( "test3" , ent . test3 )
      showTextField ( "test2" , ent . test2 )
      showTextField ( "test1" , ent . test1 )
      showTextField ( "name" , ent . name )
      showTextField ( "description" , ent . description )
      showTextField ( "url" , ent . url )
      showEntitiesField ( "issues" , ent . issues , showIssueSimple )
      showEntitiesField ( "members" , ent . members , showUserSimple )
      showEntitiesField ( "memberRequests" , ent . memberRequests , showUserSimple )
      showEntitiesField ( "followers" , ent . followers , showUserSimple )
      showBoolField ( "private" , ent . private )
      showTextField ( "email" , ent . email )
      showNumField ( "lastSynced" , ent . lastSynced )
      showBoolField ( "sync" , ent . sync )
    }
  }
  control showIssueReopenSimple ( ent : IssueReopen ) {
    header ( "IssueReopen" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntityField ( "actor" , ent . actor , showUserSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showIssueMovedSimple ( ent : IssueMoved ) {
    header ( "IssueMoved" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntityField ( "actor" , ent . actor , showUserSimple )
      showEntityField ( "target" , ent . target , showIssueSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showIssueGhostSimple ( ent : IssueGhost ) {
    header ( "IssueGhost" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showTextField ( "title" , ent . title )
      showTextField ( "description" , ent . description )
      showEntityField ( "project" , ent . project , showProjectSimple )
      showTextField ( "email" , ent . email )
      showEntitiesField ( "tags" , ent . tags , showTagSimple )
      showBoolField ( "alive" , ent . alive )
    }
  }
  control showIssueCloseSimple ( ent : IssueClose ) {
    header ( "IssueClose" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntityField ( "actor" , ent . actor , showUserSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showIssueSimple ( ent : Issue ) {
    header ( "Issue" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showNumField ( "number" , ent . number )
      showTextField ( "title" , ent . title )
      showTextField ( "description" , ent . description )
      showDateTimeField ( "submitted" , ent . submitted )
      showEntityField ( "project" , ent . project , showProjectSimple )
      showEntityField ( "reporter" , ent . reporter , showUserSimple )
      showBoolField ( "open" , ent . open )
      showEntitiesField ( "log" , ent . log , showEventSimple )
      showEntitiesField ( "tags" , ent . tags , showTagSimple )
      showTextField ( "email" , ent . email )
      showNumField ( "nrVotes" , ent . nrVotes )
      showEntitiesField ( "attachments" , ent . attachments , showAttachmentSimple )
      showTextField ( "projectName" , ent . projectName )
      showTextField ( "reporterName" , ent . reporterName )
    }
  }
  control showEventSimple ( ent : Event ) {
    header ( "Event" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showCommentSimple ( ent : Comment ) {
    header ( "Comment" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showTextField ( "text" , ent . text )
      showEntityField ( "author" , ent . author , showUserSimple )
      showDateTimeField ( "moment" , ent . moment )
    }
  }
  control showAttachmentSimple ( ent : Attachment ) {
    header ( "Attachment" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showDateTimeField ( "date" , ent . date )
    }
  }
  screen syncSimpleView ( ) {
    header ( "Sync Entities" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    var phrase = ""
    searchBox ( phrase )
    list ( ent in Project . searchPrefix ( phrase ) . order ( "name" , true ) ) {
      item {
        checkBox ( ent . sync , label = ent . name )
      }
    }
  }
  control showObject ( type : String , id : String ) {
    when ( type == "User" ) {
      showUserSimple ( User . load ( id ) )
    }
    when ( type == "TagRemoval" ) {
      showTagRemovalSimple ( TagRemoval . load ( id ) )
    }
    when ( type == "TagAddition" ) {
      showTagAdditionSimple ( TagAddition . load ( id ) )
    }
    when ( type == "Tag" ) {
      showTagSimple ( Tag . load ( id ) )
    }
    when ( type == "Project" ) {
      showProjectSimple ( Project . load ( id ) )
    }
    when ( type == "IssueReopen" ) {
      showIssueReopenSimple ( IssueReopen . load ( id ) )
    }
    when ( type == "IssueMoved" ) {
      showIssueMovedSimple ( IssueMoved . load ( id ) )
    }
    when ( type == "IssueGhost" ) {
      showIssueGhostSimple ( IssueGhost . load ( id ) )
    }
    when ( type == "IssueClose" ) {
      showIssueCloseSimple ( IssueClose . load ( id ) )
    }
    when ( type == "Issue" ) {
      showIssueSimple ( Issue . load ( id ) )
    }
    when ( type == "Event" ) {
      showEventSimple ( Event . load ( id ) )
    }
    when ( type == "Comment" ) {
      showCommentSimple ( Comment . load ( id ) )
    }
    when ( type == "Attachment" ) {
      showAttachmentSimple ( Attachment . load ( id ) )
    }
  }